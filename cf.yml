Parameters:

  AcmCertificateArn:
    Type: String

  TomVerranCertificateArn:
    Type: String

Resources:

  BlogS3Bucket:   
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html

  TomVerranS3Bucket:   
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html

  BlogCloudfront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultRootObject: index.html
        Enabled: true
        Aliases:
        - tvc.io
        Origins:
        - Id: blog-s3-bucket-cloudfront 
          DomainName: !Sub "${BlogS3Bucket}.s3-website-${AWS::Region}.${AWS::URLSuffix}"
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginProtocolPolicy: http-only
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn # has to be in us-east-1
          SslSupportMethod: sni-only # vip is $600 / month!
        DefaultCacheBehavior:
          TargetOriginId: blog-s3-bucket-cloudfront
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:       
            QueryString: false  

  TomVerranCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultRootObject: index.html
        Enabled: true
        Aliases:
        - tomverran.uk
        Origins:
        - Id: tv-s3-bucket-cloudfront 
          DomainName: !Sub "${TomVerranS3Bucket}.s3-website-${AWS::Region}.${AWS::URLSuffix}"
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginProtocolPolicy: http-only
        ViewerCertificate:
          AcmCertificateArn: !Ref TomVerranCertificateArn # has to be in us-east-1
          SslSupportMethod: sni-only # vip is $600 / month!
        DefaultCacheBehavior:
          TargetOriginId: tv-s3-bucket-cloudfront
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:       
            QueryString: false  

  TvcIoZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: tvc.io.

  TomVerranZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: tomverran.uk.

  TomVeranRecordSet:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref TomVerranZone
      RecordSets:
      - Name: tomverran.uk.
        Type: A
        AliasTarget:
          DNSName: !GetAtt TomVerranCloudFront.DomainName
          HostedZoneId: Z2FDTNDATAQYW2 # magic cloudfront string

  TvcIoRecordSet:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref TvcIoZone
      RecordSets:
      - Name: tvc.io.
        Type: A
        AliasTarget:
          DNSName: !GetAtt BlogCloudfront.DomainName
          HostedZoneId: Z2FDTNDATAQYW2 # magic cloudfront string
      - Name: tvc.io.
        Type: MX 
        TTL: 3600
        ResourceRecords:
        - "1 aspmx.l.google.com"
        - "5 alt1.aspmx.l.google.com"
        - "5 alt2.aspmx.l.google.com"
        - "10 aspmx2.googlemail.com"
        - "10 aspmx3.googlemail.com"

  TravisUser: 
    Type: AWS::IAM::User
    Properties:
      Policies:
      - PolicyName: allow-s3
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:get*
            - s3:list*
            - s3:put*
            Resource:
            - !GetAtt BlogS3Bucket.Arn
            - !Sub "${BlogS3Bucket.Arn}/*"
            - !GetAtt TomVerranS3Bucket.Arn
            - !Sub "${TomVerranS3Bucket.Arn}/*"
          - Effect: Allow
            Action:
            - cloudfront:CreateInvalidation
            Resource:
            - !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${BlogCloudfront}"
          